// Ë∞ÉËØïÈ°µÈù¢ - Áî®‰∫éÊµãËØïAPIË∞ÉÁî®
const { analyzeImage, generateStyleReport } = require('../../utils/api');

Page({
  data: {
    testResults: [],
    isLoading: false,
    debugLogs: []
  },

  onLoad() {
    this.addLog('Ë∞ÉËØïÈ°µÈù¢Âä†ËΩΩÂÆåÊàê');
  },

  /**
   * Ë∑≥ËΩ¨Âà∞APIÊµãËØïÈ°µÈù¢
   */
  goToApiTest() {
    tt.navigateTo({
      url: '/pages/api-test/api-test'
    });
  },

  /**
   * Ê∑ªÂä†Ë∞ÉËØïÊó•Âøó
   */
  addLog(message) {
    const timestamp = new Date().toLocaleTimeString();
    const newLog = `[${timestamp}] ${message}`;
    
    this.setData({
      debugLogs: [newLog, ...this.data.debugLogs].slice(0, 20) // Âè™‰øùÁïôÊúÄËøë20Êù°
    });
    
    console.log(newLog);
  },

  /**
   * ÊµãËØïAPI KeyÊòØÂê¶Ê≠£Á°ÆÈÖçÁΩÆ
   */
  testApiKeyConfig() {
    this.addLog('ÂºÄÂßãÊµãËØïAPI KeyÈÖçÁΩÆ...');
    
    try {
      const ENV_CONFIG = require('../../config/env');
      
      if (!ENV_CONFIG.OPENAI_API_KEY) {
        this.addLog('‚ùå API KeyÊú™ÈÖçÁΩÆ');
        return;
      }
      
      const apiKey = ENV_CONFIG.OPENAI_API_KEY;
      this.addLog(`‚úÖ API KeyÂ∑≤ÈÖçÁΩÆ: ${apiKey.substring(0, 10)}...${apiKey.substring(apiKey.length - 4)}`);
      this.addLog(`üì° API URL: ${ENV_CONFIG.OPENAI_BASE_URL}`);
      this.addLog(`ü§ñ Ê®°Âûã: ${ENV_CONFIG.GPT_MODEL}`);
      this.addLog(`üîÑ ‰ΩøÁî®Ê®°ÊãüÊï∞ÊçÆ: ${ENV_CONFIG.USE_MOCK_DATA}`);
      
    } catch (error) {
      this.addLog(`‚ùå ÈÖçÁΩÆÊ£ÄÊü•Â§±Ë¥•: ${error.message}`);
    }
  },

  /**
   * ÊµãËØïÁΩëÁªúËøûÊé•
   */
  testNetworkConnection() {
    this.addLog('ÂºÄÂßãÊµãËØïÁΩëÁªúËøûÊé•...');
    this.setData({ isLoading: true });

    tt.request({
      url: 'https://api.openai.com/v1/models',
      method: 'GET',
      header: {
        'Authorization': `Bearer ${require('../../config/env').OPENAI_API_KEY}`,
        'Content-Type': 'application/json'
      },
      success: (res) => {
        this.addLog(`‚úÖ ÁΩëÁªúËøûÊé•ÊàêÂäü: ${res.statusCode}`);
        this.addLog(`üìù ÂìçÂ∫îÊï∞ÊçÆ: ${JSON.stringify(res.data).substring(0, 200)}...`);
      },
      fail: (error) => {
        this.addLog(`‚ùå ÁΩëÁªúËøûÊé•Â§±Ë¥•: ${JSON.stringify(error)}`);
      },
      complete: () => {
        this.setData({ isLoading: false });
      }
    });
  },

  /**
   * ÊµãËØïÂõæÂÉèÂàÜÊûêAPI
   */
  testImageAnalysis() {
    this.addLog('ÂºÄÂßãÊµãËØïÂõæÂÉèÂàÜÊûêAPI...');
    this.setData({ isLoading: true });

    // ÂàõÂª∫‰∏Ä‰∏™ÊµãËØïÁî®ÁöÑbase64ÂõæÁâáÔºà1x1ÂÉèÁ¥†ÁöÑÈÄèÊòéPNGÔºâ
    const testBase64 = 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==';
    
    // Ê®°ÊãüË∞ÉÁî®
    const mockCall = async () => {
      try {
        this.addLog('üì° Ë∞ÉÁî®ÂõæÂÉèÂàÜÊûêAPI...');
        
        // Ê£ÄÊü•APIÈÖçÁΩÆ
        const ENV_CONFIG = require('../../config/env');
        this.addLog(`üîß ‰ΩøÁî®Ê®°ÊãüÊï∞ÊçÆ: ${ENV_CONFIG.USE_MOCK_DATA}`);
        
        if (ENV_CONFIG.USE_MOCK_DATA) {
          this.addLog('‚ö†Ô∏è ÂΩìÂâç‰ΩøÁî®Ê®°ÊãüÊï∞ÊçÆÊ®°Âºè');
          // Ê®°ÊãüÂª∂Ëøü
          await new Promise(resolve => setTimeout(resolve, 2000));
          this.addLog('‚úÖ Ê®°ÊãüÂõæÂÉèÂàÜÊûêÂÆåÊàê');
          return;
        }

        // ÁúüÂÆûAPIË∞ÉÁî®
        const result = await analyzeImage('temp_image_path', 'cool');
        this.addLog(`‚úÖ ÂõæÂÉèÂàÜÊûêÊàêÂäü: ${JSON.stringify(result)}`);
        
      } catch (error) {
        this.addLog(`‚ùå ÂõæÂÉèÂàÜÊûêÂ§±Ë¥•: ${error.message}`);
        this.addLog(`üîç ÈîôËØØËØ¶ÊÉÖ: ${JSON.stringify(error)}`);
      }
    };

    mockCall().finally(() => {
      this.setData({ isLoading: false });
    });
  },

  /**
   * ÊµãËØïÈ£éÊ†ºÊä•ÂëäÁîüÊàêAPI
   */
  testReportGeneration() {
    this.addLog('ÂºÄÂßãÊµãËØïÈ£éÊ†ºÊä•ÂëäÁîüÊàêAPI...');
    this.setData({ isLoading: true });

    // ÂàõÂª∫Ê®°ÊãüÁî®Êà∑Ê°£Ê°à
    const mockUserProfile = {
      basic_info: {
        gender: 'female',
        age: 25,
        height: 165,
        weight: 55
      },
      color_analysis: {
        season_12: 'Cool Summer',
        axes: {
          depth: 'ÊµÖ',
          contrast: '‰Ωé',
          edge: 'Êüî',
          temperature: 'ÂÜ∑',
          chroma: '‰Ωé'
        }
      },
      personality_test: {
        scores: { a: 2, b: 8, c: 3, d: 5 },
        mbti: 'ISFP'
      },
      preferences: {
        favorite_colors: ['Ëìù', 'Áªø', 'ÁôΩ'],
        occasions: ['work', 'everyday']
      }
    };

    const testCall = async () => {
      try {
        this.addLog('üì° Ë∞ÉÁî®È£éÊ†ºÊä•ÂëäÁîüÊàêAPI...');
        this.addLog(`üë§ ÊµãËØïÁî®Êà∑Ê°£Ê°à: ${JSON.stringify(mockUserProfile).substring(0, 100)}...`);
        
        const result = await generateStyleReport(mockUserProfile);
        this.addLog(`‚úÖ È£éÊ†ºÊä•ÂëäÁîüÊàêÊàêÂäü`);
        this.addLog(`üìã Êä•ÂëäÈ¢ÑËßà: ${JSON.stringify(result).substring(0, 200)}...`);
        
      } catch (error) {
        this.addLog(`‚ùå È£éÊ†ºÊä•ÂëäÁîüÊàêÂ§±Ë¥•: ${error.message}`);
        this.addLog(`üîç ÈîôËØØËØ¶ÊÉÖ: ${JSON.stringify(error)}`);
      }
    };

    testCall().finally(() => {
      this.setData({ isLoading: false });
    });
  },

  /**
   * ÊµãËØïÂüüÂêçÁôΩÂêçÂçï
   */
  testDomainWhitelist() {
    this.addLog('ÂºÄÂßãÊµãËØïÂüüÂêçÁôΩÂêçÂçïÈÖçÁΩÆ...');
    this.setData({ isLoading: true });

    // ÊµãËØïÂ§ö‰∏™OpenAIÁõ∏ÂÖ≥ÂüüÂêç
    const testDomains = [
      'https://api.openai.com/v1/models',
      'https://api.openai.com/v1/chat/completions'
    ];

    let completedTests = 0;
    const totalTests = testDomains.length;

    testDomains.forEach((url, index) => {
      this.addLog(`üåê ÊµãËØïÂüüÂêç ${index + 1}: ${url}`);
      
      tt.request({
        url: url,
        method: 'GET',
        header: {
          'Authorization': `Bearer test-key`,
          'Content-Type': 'application/json'
        },
        success: (res) => {
          this.addLog(`‚úÖ ÂüüÂêç ${index + 1} ÂèØËÆøÈóÆ: ${res.statusCode}`);
        },
        fail: (error) => {
          if (error.errNo === 21100) {
            this.addLog(`‚ùå ÂüüÂêç ${index + 1} ‰∏çÂú®ÁôΩÂêçÂçï: ${error.errMsg}`);
          } else if (error.errNo === 401 || error.statusCode === 401) {
            this.addLog(`‚úÖ ÂüüÂêç ${index + 1} ÂèØËÆøÈóÆ‰ΩÜAPI KeyÊó†Êïà (È¢ÑÊúüË°å‰∏∫)`);
          } else {
            this.addLog(`‚ö†Ô∏è ÂüüÂêç ${index + 1} ÂÖ∂‰ªñÈîôËØØ: ${JSON.stringify(error)}`);
          }
        },
        complete: () => {
          completedTests++;
          if (completedTests === totalTests) {
            this.setData({ isLoading: false });
            this.addLog('üèÅ ÂüüÂêçÊµãËØïÂÆåÊàê');
          }
        }
      });
    });
  },

  /**
   * Ê∏ÖÈô§Ë∞ÉËØïÊó•Âøó
   */
  clearLogs() {
    this.setData({
      debugLogs: [],
      testResults: []
    });
    this.addLog('Ë∞ÉËØïÊó•ÂøóÂ∑≤Ê∏ÖÈô§');
  },

  /**
   * Â§çÂà∂Êó•ÂøóÂà∞Ââ™Ë¥¥Êùø
   */
  copyLogs() {
    const allLogs = this.data.debugLogs.join('\n');
    
    tt.setClipboardData({
      data: allLogs,
      success: () => {
        tt.showToast({
          title: 'Êó•ÂøóÂ∑≤Â§çÂà∂Âà∞Ââ™Ë¥¥Êùø',
          icon: 'success'
        });
      },
      fail: () => {
        tt.showToast({
          title: 'Â§çÂà∂Â§±Ë¥•',
          icon: 'none'
        });
      }
    });
  }
});
